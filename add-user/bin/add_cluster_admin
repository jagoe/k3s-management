#!/usr/bin/env bash

### INPUT: KUBECTL CONTEXT ###
! hash kubectl && echo 'kubectl is required' && exit 1 >&2
! hash jq && echo 'kubectl is required' && exit 1 >&2
: "${K3S_CONTEXT:?Please provide as first argument the kubectl context used to connect to the k8s you want to add the user to}"

k() {
  kubectl --context="$K3S_CONTEXT" "$@"
}

k version &>/dev/null || {
  echo 'The specified K3S_CONTEXT is not valid' >&2
  exit 1
}

### INPUT: USER NAME ###
: "${K8S_USER:?Please provide the name the new user wants to use in k8s}"

### CREATE SERVICE ACCOUNT, ROLE & ROLE BINDING ###

role_binding() {
  cat <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${K8S_USER}
  namespace: kube-system 
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: ${K8S_USER}-admin
subjects:
  - kind: ServiceAccount
    name: ${K8S_USER}
    namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
EOF
}

k apply -f <(role_binding)

### GET USER SECRET ###

token_name=$(k -n kube-system describe serviceaccounts "${K8S_USER}" | grep Tokens: | awk '{print $2}')
token=$(k -n kube-system get secret "${token_name}" -o jsonpath='{.data.token}' | base64 -d)

### CREATE KUBECONFIG FOR USER ###

current_context=$(k config view --raw -o json | jq -r '.clusters[] | select(.name == "'"${K3S_CONTEXT}"'")')
certificate=$(jq -r '.cluster."certificate-authority-data"' <<<"$current_context")

cat >"${K8S_USER}".kubeconfig.yaml <<EOF
apiVersion: v1
kind: Config
clusters:
  - cluster:
      certificate-authority-data: ${certificate}
      server: $(jq '.cluster."server"' <<<"$current_context")
    name: k3-${K8S_USER}
users:
  - name: k3-${K8S_USER}
    user:
      as-user-extra: {}
      client-key-data: ${certificate}
      token: ${token}
contexts:
  - context:
      cluster: k3-${K8S_USER}
      user: k3-${K8S_USER}
    name: k3-${K8S_USER}
EOF

